{"version":3,"sources":["assets/images/comment.svg","assets/images/delete.svg","services/PostProvider.js","utils/constant.js","utils/formatData.js","components/PostHeader/PostHeader.js","utils/formatHtml.js","components/PostContent/PostContent.js","utils/formatDate.js","components/Comment/Comment.js","components/CommentList/CommentList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PostContext","createContext","useRedditPage","useContext","PostProvider","children","useState","comments","setComments","post","setPost","useEffect","fetchPost","a","fetch","then","result","json","catch","error","console","log","Provider","value","deleteComment","oldCommentId","map","comment","id","isDeleted","body","author","created_utc","Date","getTime","formatUpvotes","upvotes","Math","floor","PostHeader","subreddit","upvote","title","className","href","formatHtml","str","element","document","createElement","replace","innerHTML","textContent","PostContent","commentCount","bodyHTML","dangerouslySetInnerHTML","__html","src","commentImg","alt","formateDate","now","timeDiff","yearsDiff","monthsDiff","daysDiff","hoursDiff","minutesDiff","Comment","ups","downs","childComments","filter","parent_id","commentLastEdit","timeAgo","target","onClick","deleteImg","CommentList","index","key","App","topLevelComments","subreddit_name_prefixed","selftext_html","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8b5d5999.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/comment.fdd056a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/delete.82862f89.svg\";","import React, { useEffect, useState, useContext, createContext } from \"react\";\nimport { API_URL } from \"../utils/constant\";\n\nexport const PostContext = createContext([]);\nexport const useRedditPage = () => useContext(PostContext);\n\nconst PostProvider = ({ children }) => {\n  const [comments, setComments] = useState([]);\n  const [post, setPost] = useState([]);\n  useEffect(() => {\n    fetchPost();\n  }, []);\n\n  const fetchPost = async () => {\n    try {\n      await fetch(API_URL)\n        .then((result) => result.json())\n        .then((result) => {\n          const { comments, ...post } = result;\n          setComments(comments);\n          setPost(post);\n        })\n        .catch((error) => console.log(\"catch error\", error));\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n\n  const deleteComment = (oldCommentId) =>\n    setComments(\n      comments.map((comment) => {\n        if (comment.id === oldCommentId)\n          return {\n            ...comment,\n            isDeleted: true,\n            body: \"[This comment has been deleted]\",\n            author: \"[deleted]\",\n            created_utc: new Date().getTime(),\n          };\n        return comment;\n      })\n    );\n\n  return (\n    <PostContext.Provider value={{ post, comments, deleteComment }}>\n      {children}\n    </PostContext.Provider>\n  );\n};\n\nexport default PostProvider;\n","export const API_URL =\n  \"https://gist.githubusercontent.com/mkg0/6a4dca9067ad7a296204e7c9ecd977b0/raw/0b1ec16580ea1e970a73f5c85563c22631be7ad7/unpopularopinion-dataset.json\";\n","const formatUpvotes = (upvotes) => {\n  if (upvotes > 999) {\n    return `${Math.floor(upvotes / 100) / 10}k`;\n  }\n  return upvotes;\n};\n\nexport default formatUpvotes;\n","import React from \"react\";\nimport \"./PostHeader.scss\";\nimport formatUpvotes from \"../../utils/formatData\";\n\nconst PostHeader = ({ subreddit, upvote, title }) => {\n  return (\n    <header className=\"post-header\">\n      <a href={`https://reddit.com/${subreddit}`} className=\"sub-reddit\">\n        {subreddit}\n      </a>\n      <div className=\"post-info\">\n        <span className=\"upvotes\">{formatUpvotes(upvote)}</span>\n        <h1 className=\"head-title\">{title}</h1>\n      </div>\n    </header>\n  );\n};\n\nexport default PostHeader;\n","const formatHtml = (str) => {\n  const element = document.createElement(\"div\");\n  if (str && typeof str === \"string\") {\n    str = str.replace(/<script[^>]*>([\\S\\s]*?)<\\/script>/gim, \"\");\n    str = str.replace(/<\\/?\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gim, \"\");\n    element.innerHTML = str;\n    str = element.textContent;\n    element.textContent = \"\";\n  }\n  return str;\n};\n\nexport default formatHtml;\n","import React from \"react\";\nimport \"./PostContent.scss\";\nimport formatHtml from \"../../utils/formatHtml\";\nimport commentImg from \"./../../assets/images/comment.svg\";\n\nconst PostContent = ({ commentCount, bodyHTML }) => {\n  const normalizedBody = () => ({ __html: formatHtml(bodyHTML) });\n\n  return (\n    <div className=\"post-content\">\n      <div className=\"post-text\" dangerouslySetInnerHTML={normalizedBody()} />\n      <div className=\"comment-info\">\n        <img className=\"comment-img\" src={commentImg} alt=\"comment\" />\n        <span className=\"comment-count\">\n          {commentCount} <span>Comments</span>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default PostContent;\n","const formateDate = (then, now = new Date()) => {\n  const timeDiff = now.getTime() - then.getTime();\n\n  const yearsDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24 * 365));\n  if (yearsDiff > 0) return `${yearsDiff} years ago`;\n\n  const monthsDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24 * 30));\n  if (monthsDiff > 0) return `${monthsDiff} months ago`;\n\n  const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n  if (daysDiff > 0) return `${daysDiff} days ago`;\n\n  const hoursDiff = Math.floor(timeDiff / (1000 * 60 * 60));\n  if (hoursDiff > 0) return `${hoursDiff} hours ago`;\n\n  const minutesDiff = Math.floor(timeDiff / (1000 * 60));\n  return minutesDiff > 0 ? `${minutesDiff} minutes ago` : `< 1 minute ago`;\n};\n\nexport default formateDate;\n","import React from \"react\";\nimport deleteImg from \"./../../assets/images/delete.svg\";\nimport \"./Comment.scss\";\nimport formatUpvotes from \"../../utils/formatData\";\nimport formateDate from \"../../utils/formatDate\";\nimport CommentList from \"../CommentList/CommentList\";\nimport { useRedditPage } from \"../../services/PostProvider\";\n\nconst Comment = ({ id, author, ups, downs, created_utc, isDeleted, body }) => {\n  const { comments, deleteComment } = useRedditPage();\n  const childComments = comments.filter(({ parent_id }) => parent_id === id);\n  const commentLastEdit = new Date(created_utc * 1000);\n  const timeAgo = formateDate(commentLastEdit);\n\n  return (\n    <>\n      <div className=\"comment-content\" id={id}>\n        <div className=\"author-details\">\n          {isDeleted ? (\n            <a target=\"#\" className=\"author removed\">\n              {author}\n            </a>\n          ) : (\n            <a href={`https://reddit.com/user/${author}`} className=\"author\">\n              {author}\n            </a>\n          )}\n          <span className=\"upvotes\">{formatUpvotes(ups - downs)} points</span> -{\" \"}\n          <span className=\"time-ago\">{timeAgo}</span>\n          {isDeleted ? null : (\n            <span className=\"delete\" onClick={() => deleteComment(id)}>\n              <img className=\"icon\" src={deleteImg} alt=\"delete\"></img>\n            </span>\n          )}\n        </div>\n        <div className=\"comment-content-details\">\n          <span>{body}</span>\n        </div>\n      </div>\n      <CommentList comments={childComments} className=\"tree\" />\n    </>\n  );\n};\n\nexport default Comment;\n","import React from \"react\";\nimport \"./CommentList.scss\";\nimport Comment from \"../Comment/Comment\";\n\nconst CommentList = ({ comments = [], className }) => {\n  return (\n    <div className={`comment-group ${className ? className : \"\"}`}>\n      {comments.map((comment, index) => (\n        <Comment key={index} {...comment} />\n      ))}\n    </div>\n  );\n};\n\nexport default CommentList;\n","import React from \"react\";\nimport \"./App.scss\";\nimport { useRedditPage } from \"./services/PostProvider\";\nimport PostHeader from \"./components/PostHeader/PostHeader\";\nimport PostContent from \"./components/PostContent/PostContent\";\nimport CommentList from \"./components/CommentList/CommentList\";\n\nfunction App() {\n  const { comments, post } = useRedditPage();\n  const topLevelComments = comments.filter(({ parent_id }) => !parent_id);\n\n  return (\n    <div className=\"body\">\n      <PostHeader\n        subreddit={post.subreddit_name_prefixed}\n        title={post.title}\n        upvote={post.ups}\n      />\n      <div className=\"post-container\">\n        <section>\n          <PostContent\n            bodyHTML={post.selftext_html}\n            commentCount={comments.length}\n          />\n        </section>\n        <section className=\"comments-container\">\n          <CommentList comments={topLevelComments} />\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport PostProvider from './services/PostProvider'\n\nReactDOM.render(\n  <React.StrictMode>\n    <PostProvider>\n      <App />\n    </PostProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}